{"version":3,"sources":["clojure/core/rrb_vector/trees.cljs"],"mappings":"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","names":["clojure.core.rrb-vector.trees/new-path","tail","edit","shift","current-node","s","n","arr","ret","cljs.core/->VectorNode","rngs","clojure.core.rrb-vector.trees/push-tail","cnt","root-edit","tail-node","clojure.core.rrb-vector.nodes/regular?","cljs.core/aclone","subidx","temp__5802__auto__","child","new-carr","new-child","clojure.core.rrb-vector.nodes/node-ranges","li","cret","ccnt","clojure.core.rrb-vector.nodes/overflow?","G__8165","G__8166","G__8167","G__8168","G__8169","msg","data","cljs.core.ex_info","clojure.core.rrb-vector.trees/pop-tail","G__8170","G__8171","G__8172","G__8173","new-rngs","child-cnt","G__8174","G__8175","G__8176","G__8177","rng","clojure.core.rrb-vector.nodes/last-range","diff","clojure.core.rrb-vector.trees/do-assoc","i","val","node","clojure.core.rrb-vector.nodes/clone","G__8178","G__8179","G__8180","G__8181"],"sourcesContent":[";   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.core.rrb-vector.trees\n  (:refer-clojure :exclude [array-for push-tail pop-tail new-path do-assoc])\n  (:require [clojure.core.rrb-vector.nodes\n             :refer [regular? clone node-ranges last-range overflow?]]))\n\n(defn new-path [tail edit shift current-node]\n  (if (== (alength tail) 32)\n    (loop [s 0 n current-node]\n      (if (== s shift)\n        n\n        (let [arr (make-array 32)\n              ret (->VectorNode edit arr)]\n          (aset arr 0 n)\n          (recur (+ s 5) ret))))\n    (loop [s 0 n current-node]\n      (if (== s shift)\n        n\n        (let [arr  (make-array 33)\n              rngs (make-array 33)\n              ret  (->VectorNode edit arr)]\n          (aset arr 0 n)\n          (aset arr 32 rngs)\n          (aset rngs 32 1)\n          (aset rngs 0 (alength tail))\n          (recur (+ s 5) ret))))))\n\n(defn push-tail [shift cnt root-edit current-node tail-node]\n  (if (regular? current-node)\n    (let [arr (aclone (.-arr current-node))\n          ret (->VectorNode (.-edit current-node) arr)]\n      (loop [n ret shift shift]\n        (let [arr    (.-arr n)\n              subidx (bit-and (bit-shift-right (dec cnt) shift) 0x1f)]\n          (if (== shift 5)\n            (aset arr subidx tail-node)\n            (if-let [child (aget arr subidx)]\n              (let [new-carr  (aclone (.-arr child))\n                    new-child (->VectorNode root-edit new-carr)]\n                (aset arr subidx new-child)\n                (recur new-child (- shift 5)))\n              (aset arr subidx\n                    (new-path (.-arr tail-node)\n                              root-edit\n                              (- shift 5)\n                              tail-node))))))\n      ret)\n    (let [arr  (aclone (.-arr current-node))\n          rngs (node-ranges current-node)\n          li   (dec (aget rngs 32))\n          ret  (->VectorNode (.-edit current-node) arr)\n          cret (if (== shift 5)\n                 nil\n                 (let [child (aget arr li)\n                       ccnt  (+ (if (pos? li)\n                                  (- (aget rngs li) (aget rngs (dec li)))\n                                  (aget rngs 0))\n                                ;; add 32 elems to account for the new\n                                ;; 32-elem tail we plan to add to the\n                                ;; subtree.\n                                32)]\n                   ;; See Note 2 in file transients.cljs\n                   (if-not (overflow? child (- shift 5) ccnt)\n                     (push-tail (- shift 5) ccnt root-edit\n                                child\n                                tail-node))))]\n      (if cret\n        (do (aset arr li cret)\n            (aset rngs li (+ (aget rngs li) 32))\n            ret)\n        (do (when (>= li 31)\n              ;; See Note 1 in file transients.cljs\n              (let [msg (str \"Assigning index \" (inc li) \" of vector\"\n                             \" object array to become a node, when that\"\n                             \" index should only be used for storing\"\n                             \" range arrays.\")\n                    data {:shift shift, :cnt cnt, :current-node current-node,\n                          :tail-node tail-node, :rngs rngs, :li li,\n                          :cret cret}]\n                (throw (ex-info msg data))))\n            (aset arr (inc li)\n                  (new-path (.-arr tail-node)\n                            root-edit\n                            (- shift 5)\n                            tail-node))\n            (aset rngs (inc li) (+ (aget rngs li) 32))\n            (aset rngs 32 (inc (aget rngs 32)))\n            ret)))))\n\n(defn pop-tail [shift cnt root-edit current-node]\n  (if (regular? current-node)\n    (let [subidx (bit-and (bit-shift-right (- cnt 2) shift) 0x1f)]\n      (cond\n        (> shift 5)\n        (let [new-child (pop-tail (- shift 5) cnt root-edit\n                                  (aget (.-arr current-node) subidx))]\n          (if (and (nil? new-child) (zero? subidx))\n            nil\n            (let [arr (aclone (.-arr current-node))]\n              (aset arr subidx new-child)\n              (->VectorNode root-edit arr))))\n\n        (zero? subidx)\n        nil\n\n        :else\n        (let [arr (aclone (.-arr current-node))]\n          (aset arr subidx nil)\n          (->VectorNode root-edit arr))))\n    (let [rngs   (node-ranges current-node)\n          subidx (dec (aget rngs 32))\n          new-rngs (aclone rngs)]\n      (cond\n        (> shift 5)\n        (let [child     (aget (.-arr current-node) subidx)\n              child-cnt (if (zero? subidx)\n                          (aget rngs 0)\n                          (- (aget rngs subidx) (aget rngs (dec subidx))))\n              new-child (pop-tail (- shift 5) child-cnt root-edit child)]\n          (cond\n            (and (nil? new-child) (zero? subidx))\n            nil\n\n            (regular? child)\n            (let [arr (aclone (.-arr current-node))]\n              (aset new-rngs subidx (- (aget new-rngs subidx) 32))\n              (aset arr subidx new-child)\n              (aset arr 32 new-rngs)\n              (if (nil? new-child)\n                (aset new-rngs 32 (dec (aget new-rngs 32))))\n              (->VectorNode root-edit arr))\n\n            :else\n            (let [rng  (last-range child)\n                  diff (- rng (if new-child (last-range new-child) 0))\n                  arr  (aclone (.-arr current-node))]\n              (aset new-rngs subidx (- (aget new-rngs subidx) diff))\n              (aset arr subidx new-child)\n              (aset arr 32 new-rngs)\n              (if (nil? new-child)\n                (aset new-rngs 32 (dec (aget new-rngs 32))))\n              (->VectorNode root-edit arr))))\n\n        (zero? subidx)\n        nil\n\n        :else\n        (let [arr      (aclone (.-arr current-node))\n              child    (aget arr subidx)\n              new-rngs (aclone rngs)]\n          (aset arr subidx nil)\n          (aset arr 32 new-rngs)\n          (aset new-rngs subidx 0)\n          (aset new-rngs 32 (dec (aget new-rngs 32)))\n          (->VectorNode root-edit arr))))))\n\n(defn do-assoc [shift current-node i val]\n  (if (regular? current-node)\n    (let [node (clone shift current-node)]\n      (loop [shift shift\n             node  node]\n        (if (zero? shift)\n          (let [arr (.-arr node)]\n            (aset arr (bit-and i 0x1f) val))\n          (let [arr    (.-arr node)\n                subidx (bit-and (bit-shift-right i shift) 0x1f)\n                child  (clone shift (aget arr subidx))]\n            (aset arr subidx child)\n            (recur (- shift 5) child))))\n      node)\n    (let [arr    (aclone (.-arr current-node))\n          rngs   (node-ranges current-node)\n          subidx (bit-and (bit-shift-right i shift) 0x1f)\n          subidx (loop [subidx subidx]\n                   (if (< i (int (aget rngs subidx)))\n                     subidx\n                     (recur (inc subidx))))\n          i      (if (zero? subidx) i (- i (aget rngs (dec subidx))))]\n      (aset arr subidx\n            (do-assoc (- shift 5) (aget arr subidx) i val))\n      (->VectorNode (.-edit current-node) arr))))\n"]}