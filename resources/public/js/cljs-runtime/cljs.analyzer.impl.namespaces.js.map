{"version":3,"sources":["cljs/analyzer/impl/namespaces.cljc"],"mappings":"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","names":["cljs.analyzer.impl.namespaces/check-and-remove-as-alias","libspec","cljs.core/Symbol","cljs.core/Keyword","vec__6039","seq__6040","cljs.core/seq","first__6041","cljs.core/first","cljs.core/next","vec__6043","cljs.core.nth","vec__6046","seq__6047","first__6048","lib","spec","pre-spec","_","alias","post-spec","post","cljs.core/split-with","cljs.core/complement","libspec'","cljs.core.into","cljs.core.concat","js/Error","G__6075","cljs.core/count","cljs.core.assoc","cljs.analyzer.impl.namespaces/check-as-alias-duplicates","as-aliases","new-as-aliases","seq__6088","chunk__6089","count__6090","i__6091","vec__6123","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__6128","cljs.core/contains?","cljs.core.get","var_args","G__6134","cljs.analyzer.impl.namespaces/elide-aliases-from-libspecs","libspecs","cljs.analyzer.impl.namespaces.elide_aliases_from_libspecs","ret","cljs.core.reduce","map__6142","cljs.core/--destructure-map","as-alias","G__6144","cljs.core.update","cljs.core/conj","cljs.core/merge","cljs.analyzer.impl.namespaces/elide-aliases-from-ns-specs","ns-specs","p__6147","p__6148","map__6149","vec__6150","seq__6151","first__6152","spec-key","cljs.core._EQ_","map__6156","G__6160","cljs.core/empty?","cljs.core.list_STAR_"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.impl.namespaces)\n\n(defn check-and-remove-as-alias\n  \"Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it.\"\n  [libspec]\n  ;; ignore simple requires (symbols) and\n  ;; REPL stuff (keywords, i.e. :reload)\n  (if (or (symbol? libspec)\n          (keyword? libspec))\n    {:libspec libspec}\n    (let [[lib & spec :as libspec] libspec\n          [pre-spec [_ alias & post-spec :as post]] (split-with (complement #{:as-alias}) spec)]\n      (if (seq post)\n        (let [libspec' (into [lib] (concat pre-spec post-spec))]\n          (assert (symbol? alias)\n            (str \":as-alias must be followed by a symbol, got: \" alias))\n          (cond-> {:as-alias {alias lib}}\n            (> (count libspec') 1) (assoc :libspec libspec')))\n        {:libspec libspec}))))\n\n(defn check-as-alias-duplicates\n  [as-aliases new-as-aliases]\n  (doseq [[alias _] new-as-aliases]\n    (assert (not (contains? as-aliases alias))\n      (str \"Duplicate :as-alias \" alias \", already in use for lib \"\n        (get as-aliases alias)))))\n\n(defn elide-aliases-from-libspecs\n  \"Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.\"\n  ([libspecs]\n   (elide-aliases-from-libspecs libspecs {}))\n  ([libspecs as-aliases]\n   (let [ret {:as-aliases as-aliases\n              :libspecs   []}]\n     (reduce\n       (fn [ret libspec]\n         (let [{:keys [as-alias libspec]} (check-and-remove-as-alias libspec)]\n           (check-as-alias-duplicates (:as-aliases ret) as-alias)\n           (cond-> ret\n             libspec  (update :libspecs conj libspec)\n             as-alias (update :as-aliases merge as-alias))))\n       ret libspecs))))\n\n(defn elide-aliases-from-ns-specs [ns-specs]\n  \"Given ns specs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.\"\n  (let [ret {:as-aliases {}\n             :libspecs   []}]\n    (reduce\n      (fn [{:keys [as-aliases] :as ret} [spec-key & libspecs]]\n        (if-not (= :refer-clojure spec-key)\n          (let [{:keys [as-aliases libspecs]} (elide-aliases-from-libspecs libspecs as-aliases)]\n            (cond-> ret\n              (not (empty? as-aliases)) (update :as-aliases merge as-aliases)\n              (not (empty? libspecs))   (update :libspecs conj (list* spec-key libspecs))))\n          (update ret :libspecs conj (list* spec-key libspecs))))\n      ret ns-specs)))\n"]}